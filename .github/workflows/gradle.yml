name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # 레포지토리 읽기 권한

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        # 'Back' 폴더 안에 'Back-end' 폴더가 있고, 그 안에 gradlew가 있습니다.
        # 실제 gradlew 스크립트의 경로를 정확히 지정합니다.
        run: chmod +x ./Back/Back-end/gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        # 이 액션은 자체적으로 캐싱을 처리하며, 특정 빌드 루트 디렉토리를 지정할 필요가 없습니다.
        # working-directory는 아래 빌드 단계에서 명시합니다.

      - name: Build with Gradle Wrapper
        # 실제 gradlew가 존재하는 디렉토리로 working-directory를 설정합니다.
        # './Back/Back-end'는 레포지토리 루트 아래의 'Back' 폴더 안의 'Back-end' 폴더를 의미합니다.
        working-directory: ./Back/Back-end
        run: ./gradlew build

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 종속성 그래프 제출을 위한 쓰기 권한

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4
        with:
          # dependency-submission 액션의 경우 'build-root-directory'를 사용하여
          # Gradle 프로젝트의 루트를 지정해야 합니다.
          # 이 경로는 actions/checkout으로 가져온 레포지토리 루트를 기준으로 합니다.
          build-root-directory: ./Back/Back-end
